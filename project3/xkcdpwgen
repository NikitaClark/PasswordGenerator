#!/usr/bin/env python3
import argparse
import random


def read_wordlist(filename):
    try:
        with open(filename, "r") as file:
            return [line.strip() for line in file]
    except FileNotFoundError:
        print(f"The file '{filename}' was not found.")
        exit(1)
    except IOError:
        print("Error reading the file.")
        exit(1)


def generate_password(word_list, num_words, capitalize, num_numbers, num_symbols):
    words = random.sample(word_list, num_words)

    # Capitalize the first letter of the first word
    if capitalize > 0:
        words[0] = words[0].capitalize()

    # Lowercase all the words except the first one
    for i in range(1, len(words)):
        words[i] = words[i].lower()

    password = "".join(words)

    if num_numbers > 0:
        for _ in range(num_numbers):
            password += str(random.randint(0, 9))

    if num_symbols > 0:
        symbols = "!@#$%^&*.:;"
        for _ in range(num_symbols):
            password += random.choice(symbols)

    return password


def main():
    parser = argparse.ArgumentParser(description="Generate a secure, memorable password using the XKCD method")
    parser.add_argument("-w", "--words", type=int, default=4, help="include WORDS words in the password (default=4)")
    parser.add_argument("-c", "--caps", type=int, default=0,
                        help="capitalize the first letter of CAPS random words (default=0)")
    parser.add_argument("-n", "--numbers", type=int, default=0,
                        help="insert NUMBERS random numbers in the password (default=0)")
    parser.add_argument("-s", "--symbols", type=int, default=0,
                        help="insert SYMBOLS random symbols in the password (default=0)")
    args = parser.parse_args()

    word_list = read_wordlist("words.txt")
    if not word_list:
        exit(1)

    password = generate_password(word_list, args.words, args.caps, args.numbers, args.symbols)
    print(password)


if __name__ == "__main__":
    main()
